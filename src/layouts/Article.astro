---
import Default from "./Default.astro";
import HeroSection from "../components/HeroSection.astro";
import SocialMediaAsideBar from "../components/SocialMediaAsideBar.astro";
import ArticleInfo from "../components/ArticleInfo.astro";
import ContentHolder from "../components/ContentHolder.astro";
import NewsletterForm from "../components/Forms/NewsletterForm.astro";

interface Props {
  title:string,
  description:string,
  authorName?:string,
  pubDate:Date,
  updatedDate:Date,
  heroTitle:string,
  heroSubtitle:string,
  heroImage:string,
  contentHeaders:{depth:number,slug:string,text:string}[]
}

const { title, description, heroTitle, heroSubtitle, heroImage, contentHeaders, authorName, pubDate, updatedDate } = Astro.props;
---
<Default title={title} description={description} imageName={heroImage} pageType="article" pubDate={new Date(pubDate)} updatedDate={new Date(updatedDate)}>
  <HeroSection heroTitle={heroTitle} heroSubtitle={heroSubtitle} heroImage={heroImage} heroBtnText='Ler mais'>
    <ArticleInfo authorName={authorName} pubDate={pubDate}/>
  </HeroSection>
  <div id="content" class="article-container">
    <aside>
      <div>
        <p style="margin-bottom: 8px;"><strong>Neste artigo:</strong></p>
        <ol id="toc">
          {contentHeaders.map(item => {
            if(item.depth !== 2){return}

            return <li><a href={`#${item.slug}`}>{item.text}</a></li>
          })}
        </ol>
      </div>
      {
        title === "Política de Privacidade" ? "" : <SocialMediaAsideBar/>
      }
    </aside>
    <article>
      {
        new Date(pubDate).toString() !== new Date(updatedDate).toString() ? <blockquote id="updateNote">Este artigo foi atualizado em {new Date(updatedDate).toLocaleDateString()}.</blockquote> : ''
      }
      <slot/>
    </article>
  </div>
  {
    title === "Política de Privacidade" ? "" :
    <ContentHolder id="" orientation="column">
    <NewsletterForm/>
  </ContentHolder> 
  }
</Default>

<script src="../composables/subscribeToArticleRelease.ts"></script>

<script>
  window.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('article a').forEach(link => {
      link.setAttribute('target', '_blank');
      link.setAttribute('rel', 'noopener');
    });
  });
</script>

<style is:global>
  html {
    scroll-padding-top: 80px;
  }

  aside {
    height: fit-content;
    width: 100%;
    position: sticky;
    top: 80px;
    display: flex;
    flex-direction: column;
    gap: var(--padding_2x);
    padding: var(--padding_4x);
    background-color: #F5F5F5;
  }

  .article-container {
    display: grid;
    grid-template-columns: 480px 1fr;
    gap: var(--padding_10x);
    padding: var(--padding_10x) 0px;
  }

  #toc {
    display: flex;
    flex-direction: column;
    gap: var(--padding_1x);
  }

  #toc a {
    text-decoration: none;
  }

  #toc a:hover {
    text-decoration: underline;
  }

  article {
    display: flex;
    flex-direction: column;
    min-width: 0;
  }

  article p {
    margin-bottom: var(--padding_2x);
  }

  article h2 {
    font-size: 24px;
    margin-top: var(--padding_4x);
    margin-bottom: var(--padding_02x);
  }

  article h3 {
    font-size: 20px;
    margin-top: var(--padding_2x);
    margin-bottom: var(--padding_02x);
  }

  article *:not(ul, ol, blockquote) + h2 {
    margin-top: var(--padding_2x);
  }

  article *:not(ul, ol, blockquote) + h3 {
    margin-top: 0px;
  }

  article blockquote p {
    margin: 0px;
  }

  article blockquote {
    background-color: #f5f5f5;
    padding: var(--padding_2x) var(--padding_4x);
  }

  article a::after {
    content: url('/src/assets/svgs/external-link.svg');
    height: 14px;
    width: 14px;
    display: inline-block;
    margin-left: var(--padding_02x);
  }

  pre {
    padding: var(--padding_2x) var(--padding_4x);
    margin-bottom: 16px;
  }

  pre * {
    font-family: monospace;
    font-size: 16px;
  }

  code:not(:has(span)) {
    padding: var(--padding_02x) var(--padding_1x);
    font-family: monospace;
    font-size: 16px;
    border: 1px solid #000000;
  }

  blockquote code:not(pre) {
    border: 1px solid #000000;
    background-color: transparent;
  }

  article blockquote + p {
    margin-top: var(--padding_2x);
  }

  article ul, article ol {
    display: flex;
    flex-direction: column;
    gap: var(--padding_2x);
  }

  article ul li, article ol li {
    margin-left: var(--padding_4x);
  }

  article li ul, article li ol {
    gap: var(--padding_1x);
    margin-top: var(--padding_1x);
  }

  article ul + *:not(h2, h3), article ol + *:not(h2, h3) {
    margin-top: var(--padding_2x);
  }

  hr {
    display: none;
  }

  article img {
    width: 100%;
    aspect-ratio: 16/9;
    object-fit: cover;
    object-position: center;
  }

  iframe {
    width: 100%;
    aspect-ratio: 16/9;
  }

  iframe + p  {
    margin-top: var(--padding_2x);
  }

  @media screen and (max-width: 1312px) {
    .article-container {
      grid-template-columns: 400px 1fr;
    }
  }

  @media screen and (max-width: 1056px) {
    .article-container {
      grid-template-columns: 320px 1fr;
      gap: var(--padding_5x);
    }
  }

  @media screen and (max-width: 672px) {
    aside {
      position: inherit;
    }

    .article-container {
      grid-template-columns: 1fr;
    }

    iframe {
      aspect-ratio: 1/1;
    }
  }
</style>